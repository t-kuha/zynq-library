# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# COMPILER_WORKS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set COMPILER_WORKS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# COMPILER_WORKS_EXITCODE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set COMPILER_WORKS_EXITCODE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The COMPILER_WORKS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/imagingtechnerd/disk/nn/pytorch/_libtorch2/CMakeFiles/CMakeTmp/src.c
# Executable    : /home/imagingtechnerd/disk/nn/pytorch/_libtorch2/CMakeFiles/cmTC_39b6b-COMPILER_WORKS_EXITCODE
# Run arguments : 
#    Called from: [3]	/usr/local/share/cmake-3.13/Modules/CheckCSourceRuns.cmake
#                 [2]	/home/imagingtechnerd/disk/nn/pytorch/cmake/MiscCheck.cmake
#                 [1]	/home/imagingtechnerd/disk/nn/pytorch/CMakeLists.txt

set( COMPILER_WORKS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( COMPILER_WORKS_EXITCODE__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# HAS_C11_ATOMICS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAS_C11_ATOMICS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HAS_C11_ATOMICS_EXITCODE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HAS_C11_ATOMICS_EXITCODE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAS_C11_ATOMICS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/imagingtechnerd/disk/nn/pytorch/_libtorch2/CMakeFiles/CMakeTmp/src.c
# Executable    : /home/imagingtechnerd/disk/nn/pytorch/_libtorch2/CMakeFiles/cmTC_24c46-HAS_C11_ATOMICS_EXITCODE
# Run arguments : 
#    Called from: [3]	/usr/local/share/cmake-3.13/Modules/CheckCSourceRuns.cmake
#                 [2]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Dependencies.cmake
#                 [1]	/home/imagingtechnerd/disk/nn/pytorch/CMakeLists.txt

set( HAS_C11_ATOMICS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HAS_C11_ATOMICS_EXITCODE__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)

# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# BLAS_F2C_DOUBLE_WORKS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set BLAS_F2C_DOUBLE_WORKS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# BLAS_F2C_DOUBLE_WORKS_EXITCODE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set BLAS_F2C_DOUBLE_WORKS_EXITCODE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The BLAS_F2C_DOUBLE_WORKS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/CMakeTmp/src.c
# Executable    : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/cmTC_7e0e5-BLAS_F2C_DOUBLE_WORKS_EXITCODE
# Run arguments : 
#    Called from: [4]	/usr/local/share/cmake-3.13/Modules/CheckCSourceRuns.cmake
#                 [3]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Modules/FindBLAS.cmake
#                 [2]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Dependencies.cmake
#                 [1]	/home/imagingtechnerd/disk/nn/pytorch/CMakeLists.txt

set( BLAS_F2C_DOUBLE_WORKS_EXITCODE 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( BLAS_F2C_DOUBLE_WORKS_EXITCODE__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# BLAS_F2C_FLOAT_WORKS_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set BLAS_F2C_FLOAT_WORKS_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# BLAS_F2C_FLOAT_WORKS_EXITCODE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set BLAS_F2C_FLOAT_WORKS_EXITCODE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The BLAS_F2C_FLOAT_WORKS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/CMakeTmp/src.c
# Executable    : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/cmTC_c6ab4-BLAS_F2C_FLOAT_WORKS_EXITCODE
# Run arguments : 
#    Called from: [4]	/usr/local/share/cmake-3.13/Modules/CheckCSourceRuns.cmake
#                 [3]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Modules/FindBLAS.cmake
#                 [2]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Dependencies.cmake
#                 [1]	/home/imagingtechnerd/disk/nn/pytorch/CMakeLists.txt

set( BLAS_F2C_FLOAT_WORKS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( BLAS_F2C_FLOAT_WORKS_EXITCODE__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# BLAS_USE_CBLAS_DOT_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set BLAS_USE_CBLAS_DOT_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# BLAS_USE_CBLAS_DOT_EXITCODE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set BLAS_USE_CBLAS_DOT_EXITCODE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The BLAS_USE_CBLAS_DOT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/CMakeTmp/src.c
# Executable    : /home/imagingtechnerd/disk/nn/pytorch/_libtorch/CMakeFiles/cmTC_fe404-BLAS_USE_CBLAS_DOT_EXITCODE
# Run arguments : 
#    Called from: [4]	/usr/local/share/cmake-3.13/Modules/CheckCSourceRuns.cmake
#                 [3]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Modules/FindBLAS.cmake
#                 [2]	/home/imagingtechnerd/disk/nn/pytorch/cmake/Dependencies.cmake
#                 [1]	/home/imagingtechnerd/disk/nn/pytorch/CMakeLists.txt

set( BLAS_USE_CBLAS_DOT_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( BLAS_USE_CBLAS_DOT_EXITCODE__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)

